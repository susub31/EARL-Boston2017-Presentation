TotalHomeless2010, TotalHomeless2011)
combineddata <- merge(combineddata, hdata2012, by.x ="State", by.y="State")
combineddata <- select(combineddata, State, TotalHomeless2007, TotalHomeless2008, TotalHomeless2009,
TotalHomeless2010, TotalHomeless2011, TotalHomeless2012)
combineddata <- merge(combineddata, hdata2013, by.x ="State", by.y="State")
combineddata <- select(combineddata, State, TotalHomeless2007, TotalHomeless2008, TotalHomeless2009,
TotalHomeless2010, TotalHomeless2011, TotalHomeless2012, TotalHomeless2013)
combineddata <- merge(combineddata, hdata2014, by.x ="State", by.y="State")
combineddata <- select(combineddata, State, TotalHomeless2007, TotalHomeless2008, TotalHomeless2009,
TotalHomeless2010, TotalHomeless2011, TotalHomeless2012, TotalHomeless2013, TotalHomeless2014)
combineddata <- merge(combineddata, hdata2015, by.x ="State", by.y="State")
combineddata <- select(combineddata, State, TotalHomeless2007, TotalHomeless2008, TotalHomeless2009,
TotalHomeless2010, TotalHomeless2011, TotalHomeless2012, TotalHomeless2013,
TotalHomeless2014, TotalHomeless2015)
combineddata <- merge(combineddata, hdata2016, by.x ="State", by.y="State")
combineddata <- select(combineddata, State, TotalHomeless2007, TotalHomeless2008, TotalHomeless2009,
TotalHomeless2010, TotalHomeless2011, TotalHomeless2012, TotalHomeless2013,
TotalHomeless2014, TotalHomeless2015, TotalHomeless2016)
head(combineddata)
AK_Data_TS <- tidyr::gather(combineddata[1,], "Year", "Counts", 2:11)
AK_Data_TS$Year <- gsub("TotalHomeless", "", AK_Data_TS$Year)
AK_Data_TS$State = NULL
AK_Data_TS
plot.ts(AK_Data_TS$Counts)
AK_Data_TS <- tidyr::gather(combineddata[1,], "Year", "Counts", 2:11)
AK_Data_TS$Year <- gsub("TotalHomeless", "", AK_Data_TS$Year)
AK_Data_TS$State = NULL
AK_Data_TS
plot.ts(AK_Data_TS$Counts)
fit <- arima(log(AK_Data_TS$Counts))
pred <- predict(fit, n.ahead = 1)
new_TS <- rbind(AK_Data_TS, c(2017, as.integer(2.718^pred$pred)))
new_TS
# 2017 for Alaska: 1128 + 717 (https://www.alaskahousing-homeless.org/data/)
new_TS
# 2017 for Alaska: 1128 + 717 (https://www.alaskahousing-homeless.org/data/)
fit <- arima(log(AK_Data_TS$Counts))
pred <- predict(fit, n.ahead = 1)
new_TS <- rbind(AK_Data_TS, c(2017, as.integer(2.718^pred$pred)))
tail(new_TS)
# 2017 for Alaska: 1128 + 717 (https://www.alaskahousing-homeless.org/data/)
head(new_TS, 11)
# 2017 for Alaska: 1128 + 717 (https://www.alaskahousing-homeless.org/data/)
fit <- arima(log(AK_Data_TS$Counts))
pred <- predict(fit, n.ahead = 1)
new_TS <- rbind(AK_Data_TS, c(2017, as.integer(2.718^pred$pred)))
fit <- arima(log(AK_Data_TS$Counts))
pred <- predict(fit, n.ahead = 1)
new_TS <- rbind(AK_Data_TS, c(2017, as.integer(2.718^pred$pred)))
print("The value for the next year 2017 is: ", pred$pred)
fit <- arima(log(AK_Data_TS$Counts))
pred <- predict(fit, n.ahead = 1)
new_TS <- rbind(AK_Data_TS, c(2017, as.integer(2.718^pred$pred)))
print(paste0("The value for the next year 2017 is: ", pred$pred))
fit <- arima(log(AK_Data_TS$Counts))
pred <- predict(fit, n.ahead = 1)
new_TS <- rbind(AK_Data_TS, c(2017, as.integer(2.718^pred$pred)))
print(paste0("The value for the next year 2017 is: ", as.integer(2.718^pred$pred)))
tail(new_TS)
# 2017 for Alaska: 1128 + 717 (https://www.alaskahousing-homeless.org/data/)
tail(new_TS)
print("https://www.alaskahousing-homeless.org/data/")
print("PIT counts for 2017 for Alaska are: 1128 + 717 = 1845")"
tail(new_TS)
print("https://www.alaskahousing-homeless.org/data/")
print("PIT counts for 2017 for Alaska are: 1128 + 717 = 1845")
print("https://www.alaskahousing-homeless.org/data/")
print("PIT counts for 2017 for Alaska are: 1128 + 717 = 1845")
p1 <- ggplot(AK, aes(Year, Counts, group=1)) +
geom_point() +
geom_line() +
labs(x="Year", y="Counts") +
geom_smooth()
#p1 + stat_smooth(aes(y=Counts, x=Year), method='loess')
p1 <- ggplot(AK, aes(Year, Counts, group=1)) +
geom_point() +
geom_line() +
labs(x="Year", y="Counts") +
geom_smooth()
#p1 + stat_smooth(aes(y=Counts, x=Year), method='loess')
p1 <- ggplot(AK, aes(Year, Counts, group=1)) +
geom_point() +
geom_line() +
labs(x="Year", y="Counts") +
geom_smooth()
p1
#p1 + stat_smooth(aes(y=Counts, x=Year), method='loess')
p1 <- ggplot(AK, aes(Year, Counts, group=1)) +
geom_point() +
geom_line() +
labs(x="Year", y="Counts") +
geom_smooth()
p2 <- ggplot(new_TS, aes(Year, Counts, group=1)) +
geom_point() +
geom_line() +
labs(x="Year", y="Counts") +
geom_smooth()
p1
p2
#p1 + stat_smooth(aes(y=Counts, x=Year), method='loess')
p1 <- ggplot(AK, aes(Year, Counts, group=1)) +
geom_point() +
geom_line() +
labs(x="Year", y="Counts") +
geom_smooth()
p1
p2 <- ggplot(new_TS, aes(Year, Counts, group=1)) +
geom_point() +
geom_line() +
labs(x="Year", y="Counts") +
geom_smooth()
p2
View(hdata2016)
View(AK)
COL_Cities <- read.csv("../Datasets/COL_Details_SelectCities.csv")
View(COL_Cities)
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex), alpha=0.3)
library(ggplot2)
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex), alpha=0.3)
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3)
COL_Plot
COL_Cities$City_County <- factor(COL_Cities$City_County, levels=COL_Cities$City_County[order(COL_Cities$City_County)])
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3)
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3)
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot
COL_Cities <- transform(COL_Cities, City_County=reorder(City_County, -value))
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot
COL_Cities <- transform(COLIndex, City_County=reorder(COLIndex, -value))
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot
COL_Cities <- read.csv("../Datasets/COL_Details_SelectCities.csv")
COL_Cities <- transform(COLIndex, COLIndex=reorder(COLIndex, -value))
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot
COL_Cities <- transform(COL_Cities, COLIndex=reorder(COLIndex, -value))
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot
COL_Cities$COLIndex <- factor(COL_Cities$COLIndex, levels=COL_Cities$COLIndex[order(COL_Cities$COLIndex)])
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot
COL_Plot
g <- ggplot(COL_Cities, aes(reorder(COLIndex, City_County), City_County))
g + geom_line() + coord_flip()
g
g <- ggplot(COL_Cities, aes(reorder(COLIndex, City_County), City_County))
g + geom_line() + scale_y_continuous((formatter="percent")) + coord_flip()
g
g <- ggplot(COL_Cities, aes(reorder(City_County, COLIndex), City_County))
g + geom_line() + scale_y_continuous((formatter="percent")) + coord_flip()
g
g <- ggplot(COL_Cities, aes(reorder(COLIndex, City_County), City_County))
g + geom_line() + scale_y_continuous((formatter="percent")) #+ coord_flip()
g
g <- ggplot(COL_Cities, aes(reorder(COLIndex, City_County), COLIndex))
g + geom_line() + scale_y_continuous((formatter="percent")) + coord_flip()
g
g <- ggplot(COL_Cities) + geom_line(aes(reorder(COLIndex, City_County), COLIndex))
#g + geom_line() + scale_y_continuous((formatter="percent")) + coord_flip()
g
g <- ggplot(COL_Cities) + geom_line(aes(reorder(COLIndex, City_County), COLIndex)) +
xlim(rev(levels(COL_Cities$COLIndex)))
#g + geom_line() + scale_y_continuous((formatter="percent")) + coord_flip()
g
COL_Cities <- read.csv("../Datasets/COL_Details_SelectCities.csv")
COL_Cities <- transform(COL_Cities, COLIndex=reorder(COLIndex, -value))
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity") +
xlim(rev(levels(COL_Cities$COLIndex)))
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(COLIndex, City_County, group=1), alpha=0.3, stat = "identity") +
xlim(rev(levels(COL_Cities$COLIndex)))
COL_Plot
COL_Cities <- read.csv("../Datasets/COL_Details_SelectCities.csv")
#COL_Cities$COLIndex <- factor(COL_Cities$COLIndex, levels=COL_Cities$COLIndex[order(COL_Cities$COLIndex)])
#COL_Cities <- transform(COL_Cities, COLIndex=reorder(COLIndex, -value))
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(COLIndex, City_County, group=1), alpha=0.3, stat = "identity") +
xlim(rev(levels(COL_Cities$COLIndex)))
COL_Plot
COL_Cities <- read.csv("../Datasets/COL_Details_SelectCities.csv")
#COL_Cities$COLIndex <- factor(COL_Cities$COLIndex, levels=COL_Cities$COLIndex[order(COL_Cities$COLIndex)])
#COL_Cities <- transform(COL_Cities, COLIndex=reorder(COLIndex, -value))
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_line(aes(COLIndex, City_County, group=1), alpha=0.3, stat = "identity")
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=90, hjust=1))
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=45, hjust=1))
COL_Plot
install.packages("reshape2")
library(reshape2)
COL_Mod <- melt(COL_Plot, id.var="City_County")
COL_Mod <- melt(as.data.table(COL_Plot), id.var="City_County")
ggplot(COL_Plot, aes(x=City_County, y=value, fill=variable)) +
geom_bar(stat="identity")
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity")
COL_Plot <- COL_Plot + geom_bar(aes(City_County, Housing, group=1), alpha=0.3, stat = "identity")
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=45, hjust=1))
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity", fill=COLIndex)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, Housing, group=1), alpha=0.3, stat = "identity", fill=Housing)
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=45, hjust=1))
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity", color="blue")
COL_Plot <- COL_Plot + geom_bar(aes(City_County, Housing, group=1), alpha=0.3, stat = "identity")
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=45, hjust=1))
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1), alpha=0.3, stat = "identity", color="blue")
COL_Plot <- COL_Plot + geom_bar(aes(City_County, Housing, group=1), alpha=0.3, stat = "identity", color="red")
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=45, hjust=1))
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1, fill=COLIndex), alpha=0.3, stat = "identity", color="blue")
COL_Plot <- COL_Plot + geom_bar(aes(City_County, Housing, group=1, fill=Housing), alpha=0.3, stat = "identity", color="red")
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=45, hjust=1))
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1, fill=COLIndex), alpha=0.3, stat = "identity", color="blue")
COL_Plot <- COL_Plot + geom_bar(aes(City_County, Housing, group=1), alpha=0.3, stat = "identity", color="red")
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=45, hjust=1))
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1, fill=COLIndex), alpha=0.3, stat = "identity", color="blue")
#COL_Plot <- COL_Plot + geom_bar(aes(City_County, Housing, group=1), alpha=0.3, stat = "identity", color="red")
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=45, hjust=1))
COL_Plot
COL_Plot <- ggplot(COL_Cities)
COL_Plot <- COL_Plot + geom_bar(aes(City_County, COLIndex, group=1, fill=COLIndex), alpha=0.3, stat = "identity")
#COL_Plot <- COL_Plot + geom_bar(aes(City_County, Housing, group=1), alpha=0.3, stat = "identity", color="red")
COL_Plot <- COL_Plot + theme(axis.text.x = element_text(angle=45, hjust=1))
COL_Plot
library(dplyr)
library(ggplot2)
PIT_Variations <- read.csv("../Datasets/PIT_Counts_Variations_Data.csv")
View(PIT_Variations)
str(PIT_Variations)
PIT_Variations <- read.csv("../Datasets/PIT_Counts_Variations_Data.csv")
str(PIT_Variations)
View(PIT_Variations)
g <- ggplot(PIT_Variations, aes(state, Change_2007_2016)) +
geom_boxplot() +
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
g
g <- ggplot(PIT_Variations, aes(Change_2015_2016, Change_2007_2016)) +
geom_boxplot() +
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
g
View(homelessdatawithlatlon)
View(homelessdatawithlatlon)
View(modhdata)
View(contusdata)
getwd
getwd()
knitr::opts_chunk$set(echo = TRUE)
#Plot a blank US Map
BlankUSMap <- ggplot()
BlankUSMap <- BlankUSMap + geom_map(data=us, map=us, aes(x=long, y=lat, map_id=region),
fill="white", color="black")
#US Map, color coded based on the total homeless counts in the state
HomelessMap <- BlankUSMap + geom_map(data=CountsByState, map=us,
aes(fill=TotalHomeless, map_id=region), color="#ffffff", size=0.15)
# Read the dataset that holds Homeless Data for 2016
hdata <- read.csv("../Datasets/HomelessData2016.csv", stringsAsFactors = FALSE)
# Read the dataset that holds the extracted values of Lat and Lon for the CoCs
modhdata <- read.csv("../Datasets/HomelessData2016_With_LatLon.csv", stringsAsFactors = FALSE)
modhdata$Total.Homeless..2016 = NULL
modhdata$CoC.Name=NULL
# Merge the datasets and extract the desired columns; rename the columns
alldata <- merge(hdata, modhdata, by.x ="CoC.Number", by.y="CoC.Number")
alldata <- select(alldata, CoC.Number, CoC.Name, cityname, lat, lon, Total.Homeless..2016,
Homeless.Veterans..2016, Homeless.Unaccompanied.Youth..Under.25...2016) %>%
rename(TotalHomeless = Total.Homeless..2016, HomelessVeterans = Homeless.Veterans..2016,
HomelessYouth = Homeless.Unaccompanied.Youth..Under.25...2016)
# The following conversion is required to get the numeric value for the homeless counts
alldata$TotalHomeless <- as.numeric(gsub(",","", alldata$TotalHomeless))
alldata$HomelessVeterans <- as.numeric(gsub(",", "", alldata$HomelessVeterans))
alldata$HomelessYouth <- as.numeric(gsub(",", "", alldata$HomelessYouth))
# Extract the lat/lon coordinates pertaining to mainland US
# http://en.wikipedia.org/wiki/Extreme_points_of_the_United_States#Westernmost
top = 49.3457868 # north lat
bottom =  24.7433195 # south lat
left = -124.7844079 # west long
right = -66.9513812 # east long
#select for states in continous United States
contusdata <- alldata %>%
filter(lat > 24 & lat < 50) %>%
filter(lon < -66 & lon > -124)
#Include a column to capture "State" from CoCNumber
contusdata$State = substr(contusdata$CoC.Number,1,2)
# Load US States dataset for generating the map
us <- map_data("state")
usstates <- read.csv("../Datasets/StateNames.csv")
usstates <- usstates %>%
add_rownames("region") %>%
mutate(region=tolower(StateName))
# Merge US States and Cost of Living by cities datasets for color-coding the US Map
usstates$StateName=NULL
usstates <- merge(usstates, contusdata, by.x="State", by.y="State")
# Group by and get totals by state in each category
CountsByState <- usstates %>%
group_by(State, region) %>%
summarize(TotalHomeless = sum(TotalHomeless), HomelessVeterans = sum(HomelessVeterans), HomelessYouth = sum(HomelessYouth))
CountsByState$Count.Category <- ifelse(CountsByState$TotalHomeless > 20000, "HIGH", ifelse(CountsByState$TotalHomeless > 10000, "MEDIUM", "LOW"))
#Plot a blank US Map
BlankUSMap <- ggplot()
BlankUSMap <- BlankUSMap + geom_map(data=us, map=us, aes(x=long, y=lat, map_id=region),
fill="white", color="black")
#US Map, color coded based on the total homeless counts in the state
HomelessMap <- BlankUSMap + geom_map(data=CountsByState, map=us,
aes(fill=TotalHomeless, map_id=region), color="#ffffff", size=0.15)
HomelessMap <- HomelessMap + scale_fill_continuous(low='lightgrey', high='blue', guide='colorbar')
HomelessMap <- HomelessMap + labs(x=NULL, y=NULL) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(axis.text = element_blank())
HomelessMap
# select top 100 based on homeless counts - adults
hdatatop100 <- tbl_df(subset(alldata, !((substr(alldata$CoC.Number,1,2) =="HI")) & !((substr(alldata$CoC.Number,1,2) =="PR")) )) %>%
top_n(100, TotalHomeless)
Top100HomelessAdultsMap <- HomelessMap +
geom_point(aes(x=lon, y=lat, size=TotalHomeless, colour="red", alpha=0.8), data=hdatatop100) +
ggtitle("Homeless Counts - Adults (Top 100)") +
scale_size_continuous(name="Homeless Counts", range = c(2,12), guide = FALSE) +
scale_alpha(guide=FALSE) +
scale_colour_discrete(guide=FALSE)
Top100HomelessAdultsMap
View(hdatatop100)
# select top 100 based on homeless counts - veterans
hvetsdatatop100 <- tbl_df(subset(alldata, !((substr(alldata$CoC.Number,1,2) =="HI")) & !((substr(alldata$CoC.Number,1,2) =="PR")) )) %>%
top_n(100, HomelessVeterans)
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(stringr)
require(stringi)
require(caret)
require(ggmap)
require(ggplot2)
#function definition to extract from string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
# Read the dataset that holds Homeless Data for 2016
hdata <- read.csv("../Datasets/HomelessData2016.csv", stringsAsFactors = FALSE)
# Read the dataset that holds the extracted values of Lat and Lon for the CoCs
modhdata <- read.csv("../Datasets/HomelessData2016_With_LatLon.csv", stringsAsFactors = FALSE)
modhdata$Total.Homeless..2016 = NULL
modhdata$CoC.Name=NULL
# Merge the datasets and extract the desired columns; rename the columns
alldata <- merge(hdata, modhdata, by.x ="CoC.Number", by.y="CoC.Number")
alldata <- select(alldata, CoC.Number, CoC.Name, cityname, lat, lon, Total.Homeless..2016,
Homeless.Veterans..2016, Homeless.Unaccompanied.Youth..Under.25...2016) %>%
rename(TotalHomeless = Total.Homeless..2016, HomelessVeterans = Homeless.Veterans..2016,
HomelessYouth = Homeless.Unaccompanied.Youth..Under.25...2016)
# The following conversion is required to get the numeric value for the homeless counts
alldata$TotalHomeless <- as.numeric(gsub(",","", alldata$TotalHomeless))
alldata$HomelessVeterans <- as.numeric(gsub(",", "", alldata$HomelessVeterans))
alldata$HomelessYouth <- as.numeric(gsub(",", "", alldata$HomelessYouth))
# Extract the lat/lon coordinates pertaining to mainland US
# http://en.wikipedia.org/wiki/Extreme_points_of_the_United_States#Westernmost
top = 49.3457868 # north lat
bottom =  24.7433195 # south lat
left = -124.7844079 # west long
right = -66.9513812 # east long
#select for states in continous United States
contusdata <- alldata %>%
filter(lat > 24 & lat < 50) %>%
filter(lon < -66 & lon > -124)
#Include a column to capture "State" from CoCNumber
contusdata$State = substr(contusdata$CoC.Number,1,2)
# Load US States dataset for generating the map
us <- map_data("state")
usstates <- read.csv("../Datasets/StateNames.csv")
usstates <- usstates %>%
add_rownames("region") %>%
mutate(region=tolower(StateName))
# Merge US States and Cost of Living by cities datasets for color-coding the US Map
usstates$StateName=NULL
usstates <- merge(usstates, contusdata, by.x="State", by.y="State")
# Group by and get totals by state in each category
CountsByState <- usstates %>%
group_by(State, region) %>%
summarize(TotalHomeless = sum(TotalHomeless), HomelessVeterans = sum(HomelessVeterans), HomelessYouth = sum(HomelessYouth))
CountsByState$Count.Category <- ifelse(CountsByState$TotalHomeless > 20000, "HIGH", ifelse(CountsByState$TotalHomeless > 10000, "MEDIUM", "LOW"))
ggplot(CountsByState, aes(x=TotalHomeless)) +
geom_density()
ggplot(CountsByState, aes(x=TotalHomeless)) +
geom_density() +
facet_wrap(~ Count.Category)
#Plot a blank US Map
BlankUSMap <- ggplot()
BlankUSMap <- BlankUSMap + geom_map(data=us, map=us, aes(x=long, y=lat, map_id=region),
fill="white", color="black")
#US Map, color coded based on the total homeless counts in the state
HomelessMap <- BlankUSMap + geom_map(data=CountsByState, map=us,
aes(fill=TotalHomeless, map_id=region), color="#ffffff", size=0.15)
HomelessMap <- HomelessMap + scale_fill_continuous(low='lightgrey', high='blue', guide='colorbar')
HomelessMap <- HomelessMap + labs(x=NULL, y=NULL) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(axis.text = element_blank())
HomelessMap
# select top 100 based on homeless counts - adults
hdatatop100 <- tbl_df(subset(alldata, !((substr(alldata$CoC.Number,1,2) =="HI")) & !((substr(alldata$CoC.Number,1,2) =="PR")) )) %>%
top_n(100, TotalHomeless)
Top100HomelessAdultsMap <- HomelessMap +
geom_point(aes(x=lon, y=lat, size=TotalHomeless, colour="red", alpha=0.8), data=hdatatop100) +
ggtitle("Homeless Counts - Adults (Top 100)") +
scale_size_continuous(name="Homeless Counts", range = c(2,12), guide = FALSE) +
scale_alpha(guide=FALSE) +
scale_colour_discrete(guide=FALSE)
Top100HomelessAdultsMap
# select top 100 based on homeless counts - veterans
hvetsdatatop100 <- tbl_df(subset(alldata, !((substr(alldata$CoC.Number,1,2) =="HI")) & !((substr(alldata$CoC.Number,1,2) =="PR")) )) %>%
top_n(100, HomelessVeterans)
Top100HomelessVeteransMap <- HomelessMap +
geom_point(aes(x=lon, y=lat, size=HomelessVeterans, colour="red", alpha=0.8), data=hvetsdatatop100) +
ggtitle("Homeless Counts - Veterans (Top 100)") +
scale_size_continuous(name="Homeless Counts", range = c(2,12), guide = FALSE) +
scale_alpha(guide=FALSE) +
scale_colour_discrete(guide=FALSE)
Top100HomelessVeteransMap
hyouthdatatop100 <- tbl_df(subset(alldata, !((substr(alldata$CoC.Number,1,2) =="HI")) & !((substr(alldata$CoC.Number,1,2) =="AK")) & !((substr(alldata$CoC.Number,1,2) =="PR")) )) %>%
top_n(100, HomelessYouth)
Top100HomelessYouthMap <- HomelessMap +
geom_point(aes(x=lon, y=lat, size=HomelessYouth, colour="red", alpha=0.8), data=hyouthdatatop100) +
ggtitle("Homeless Counts - Youth (Top 100)") +
scale_size_continuous(name="Homeless Counts", range = c(2,12), guide = FALSE) +
scale_alpha(guide=FALSE) +
scale_colour_discrete(guide=FALSE)
Top100HomelessYouthMap
#Read Grants dataset
GrantsDS <- read.csv("../Datasets/ESGGrantDSWithGeoCodes.csv")
#Read Grants dataset
GrantsDS <- read.csv("../Datasets/GrantDSWithGeoCodes.csv")
GrantsDStop35 <- tbl_df(GrantsDS) %>%
top_n(35, TOT_AMT)
GrantsDStop35 <- subset(GrantsDStop35, !(STUSAB == "PR"))
AllGrantsDStop35 <- group_by(GrantsDS, round(lat, 2)) %>% mutate(sum(TOT_AMT))
AllHomelessTop35 <- tbl_df(subset(alldata, !((substr(alldata$CoC.Number,1,2) =="HI")) & !((substr(alldata$CoC.Number,1,2) =="PR")) )) %>%
top_n(25, TotalHomeless)
GrantsDStop35 <- tbl_df(subset(GrantsDS, !((substr(GrantsDS$STUSAB,1,2) =="HI")) & !((substr(GrantsDS$STUSAB,1,2) =="PR")) )) %>%
top_n(25, TOT_AMT)
us <- map_data("state")
usstates <- read.csv("../Datasets/StateNames.csv")
usstates <- usstates %>%
add_rownames("region") %>%
mutate(region=tolower(StateName))
COLByCities <- read.csv("../Datasets/COL_ByCities.csv")
COLByCities$UrbanArea <- gsub(", ", " ", COLByCities$UrbanArea)
COLByCities$State <- COLByCities$UrbanArea
COLByCities$State <- substrRight(COLByCities$State, 2)
usstates$StateName=NULL
usstates <- merge(usstates, COLByCities, by.x="State", by.y="State")
COLByCities <- group_by(COLByCities, State)
COLByCities <- summarise(COLByCities, COLStateAvg=mean(COLIndex), HousingIndex=mean(Housing))
COLMap <- BlankUSMap + geom_map(data=usstates, map=us,
aes(fill=Housing, map_id=region), color="#ffffff", size=0.15)
COLMap <- COLMap + scale_fill_continuous(low='lightgray', high='lightblue', guide='colorbar')
COLMap <- COLMap + labs(x=NULL, y=NULL) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(axis.text = element_blank())
GrantsAndCountsmap <- COLMap +
geom_point(aes(x=lon, y=lat, size=TOT_AMT, colour="Total Grants", alpha=0.8), data=GrantsDStop35) +
geom_point(aes(x=lon, y=lat, size=TotalHomeless, colour="Homeless Counts", alpha=0.8), data=AllHomelessTop35) +
labs(x='Longitude', y='Latitude') +
ggtitle("Homeless Counts vs. Grants") +
scale_alpha(guide=FALSE) +
theme(legend.position="none")
GrantsAndCountsmap <- GrantsAndCountsmap + labs(x=NULL, y=NULL) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(axis.text = element_blank()) +
theme(legend.position = "none")
GrantsAndCountsmap
View(hvetsdatatop100)
View(hyouthdatatop100)
View(hyouthdatatop100)
View(usstates)
View(GrantsDStop35)
View(GrantsDStop35)
